Binôme 3203 
Sébastien Di Giovanni
Alan Barzasi

Compte rendu TP C++ n°1 : Première classe simple

Spécification et conception : 

La phase d'analyse du cahier des charges nous a dirigé vers la manipulation de tableaux d'entiers, non triés, pouvant comporter des doublons et accompagnés de nombres entiers permettant de connaître la taille du tableau et le nombre d'éléments qu'il contient.
Nous souhaitons être capable d'afficher le contenu d'une collection, d'ajouter des éléments, d'en retirer plusieurs à la fois, de fusionner deux collections existantes et d'ajuster la taille d'une collection.


Présentation de la structure de données retenue :

Nous avons finalement convenu de réaliser une classe CollectionEntiers, comprenant trois attributs : un tableau d'entiers et deux entiers représentants le nombre d'éléments maximum pouvant être contenu par ce tableau et le nombre d'éléments courant i.e. effectivement contenu par le tableau.

Ces attributs seront respectivement nommés par la suite tabValeurs, nbElemtMax et nbElemtCourant.  Ils permettent de définir et de manipuler les collections qui contiendront donc des entiers.


Spécifications des méthodes :

	Second constructeur : 
Prend en paramètres un tableau d'entiers ainsi que sa taille.
Créé une collection d'entiers qui contient les mêmes entiers que le tableau passé en paramètre et dont la taille ainsi que le nombre d'éléments contenus sont identiques à la taille du tableau.
Les entiers sont triés au sein de la collection dans le même ordre que dans le tableau et les doublons ne sont pas gérés.
 
	Ajouter :
Prend en paramètre un unique entier à ajouter à la collection.
Avant l'ajout, si le tableau d'entiers lié à la collection est plein, sa taille est augmentée de un à l'aide de la méthode Ajuster (non spécifiée dans ce document). 
Ensuite, l'ajout a lieu et place le nouvel entier juste après le dernier élément du tableau.
La méthode se termine par l'incrémentation du nombre d'éléments courant de la collection.

	Retirer :
Prend en paramètre un tableau d'entiers dont les valeurs doivent être distinctes, ainsi que la taille de ce tableau.
Chaque entier de la collection dont la valeur est présente dans le tableau donné en paramètre est retiré : le dernier entier de la collection est déplacé à la position de l'entier retiré et le nombre d'éléments courant de la collection est réduit de un.
Si plusieurs entiers de la collection on la même valeur et que celle-ci est présente dans le tableau de valeurs à retirer, alors tous ces entiers sont retirés de la collection.
La taille du tableau lié à la collection est finalement réduite au nombre d'éléments courant de la collection. 

	Réunir :
Prend en paramètre une collection d'entiers notée collection2 
Avant la réunion, si la taille du tableau lié à la collection sur laquelle est appelée la méthode, notée collection1, n'est pas suffisante pour stocker les entiers contenus dans chacune des deux collections, alors cette taille est augmentée de manière optimale (taille minimale permettant ce stockage).
Ensuite, les entiers contenus dans collection2 sont ajoutés à la collection1. Ces entiers sont positionnés dans leur ordre initial (celui de collection2) à la suite des entiers contenus dans collection1.
Le nombre d'éléments courant est finalement augmenté pour correspondre au nombre d'éléments présents dans collection1 avant la réunion plus le nombre d'éléments présents dans collection2.

Tests Fonctionnels :

Il est nécessaire d'utiliser la méthode Afficher en plus des méthodes tester afin de vérifier, en dehors du déroulement sans erreur du programme, que tout ce passe correctement.

Second constructeur:
	TestConstructeurDeuxAfficher1: On teste via affichage la création d'une collection à partir d'un tableau de 8 valeurs.
	TestConstructeurDeuxAfficher2: Idem avec 9 valeurs.

Ajouter:
	TestAjouter1: On crée une collection de taille 10 vide à laquelle on ajoute 3 valeurs, avant d'afficher la collection.
	TestAjouter2: Idem avec une taille 13 et 6 valeurs. 
	TestAjouter3: Idem avec une taille 4 et 6 valeurs, l'idée étant de tester si l'appel à Ajuster se fait correctement.
	
Retirer:
	TestRetirer1: On crée une collection de taille 15 à laquelle on ajoute 11 valeurs, on retirer ensuite 3 valeurs à l'aide d'un tableau qui ne contient que des valeurs de la collection. On affiche le résultat.
	TestRetirer2: Idem avec une taille 17 et 11 valeurs, on souhaite cette fois retirer des valeurs ayant des doublons. On affiche le résultat.
	//Test avec des valeurs à retirer qui ne sont pas dans la collection?
	
Réunir:
	TestRéunir1: On réunit sur une collection de taille 10 ayant 4 valeurs une collection de taille 7 ayant 3 valeurs. On affiche le résultat.
	TestRéunir2: Idem avec une taille 14 et 4 valeurs et une taille 7 avec 5 valeurs. Affichage du résultat.
	TestRéunir3: Idem avec une taille 6 et 4 valeurs et une taille 7 avec 5 valeurs. Affichage du résultat.
	//Test avec une ou 2 collection(s) vide(s)?
